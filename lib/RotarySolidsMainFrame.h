#ifndef __RotarySolidsMainFrame__
#define __RotarySolidsMainFrame__

/**
@file
Subclass of MainFrame, which is generated by wxFormBuilder.
*/

#include "RotarySolids.h"

//// end generated include

#include <wx/filedlg.h>
#include <wx/dcmemory.h>
#include <wx/dcclient.h>
#include <wx/dcbuffer.h>
#include <wx/msgdlg.h>
#include <cmath>
#include <fstream>
#include <algorithm>
#include "Segment.h"
#include "RotarySolidsSelectionFrame.h"

enum class Shape { square, rectangle, triangle, circle, line, polygon, sombrero, parabola };

/** Implementing MainFrame */
class RotarySolidsMainFrame : public MainFrame
{
	protected:
		// Handlers for MainFrame events.
		void LeftPanelOnLeftDClick( wxMouseEvent& event );
		void LeftPanelOnUpdateUI( wxUpdateUIEvent& event );
		void xLabelOnLeftDClick( wxMouseEvent& event );
		void xyzSliderUpdated( wxScrollEvent& event );
		void yLabelOnLeftDClick( wxMouseEvent& event );
		void zLabelOnLeftDClick( wxMouseEvent& event );
		void OpenPropertiesWindowButtonOnButtonClick( wxCommandEvent& event );
		void SaveToFileButtonOnButtonClick( wxCommandEvent& event );
		void parallelViewResetOnButtonClick( wxCommandEvent& event );
		void parallelView1OnButtonClick( wxCommandEvent& event );
		void parallelView2OnButtonClick( wxCommandEvent& event );
		void parallelView3OnButtonClick( wxCommandEvent& event );
	public:
		/** Constructor */
		RotarySolidsMainFrame( wxWindow* parent );
	//// end generated class members

		// przemalowywanie obszaru rysowania
		void Repaint(bool);

		// generowanie bazowej figury
		void generateShape();

		// rysowanie bryły jako wielu wypełnionych wielokątów
		void drawShape(wxBufferedDC&, int,  int, bool);

		// obracanie bryły wokół wszystkich osi
		void rotateByXYZ();

		// generowanie punktów bryły na podstawie punktów pierwszej figury leżącej na płaszczyźnie xOz
		void nextPoints(std::vector<Point>&);

		// generowanie punktów okręgu
		void circleNextPoints(std::vector<Point>&, int);

		// współrzędne x' i y' ze współrzędnych x, y i z
		wxPoint Point3DtoPoint2D(Point, int, int, bool);

		void resizeData(int);

		// ustawienie dokładności przybliżenia bryły
		void setSolidRoundnessLevel(int);

		void setXCoord(int);

		void setZCoord(int);

		void setShape(Shape);

		void setDefaultSliders();

		void setPolygonSides(int);

	private:
		wxImageHandler* imageHandler = nullptr;
		RotarySolidsSelectionFrame* propertiesFrame = NULL;
		Shape shape = Shape::square;
		std::vector<std::vector<Point>> data;
		std::vector<std::vector<Point>> dataWithoutRotation;

		int solidRoundnessLevel = 2;
		int fileNum = 1;
		int polygonSides = 0;
		bool parallelView = false;
		double xCoord = 0;
		double zCoord = 0;
};

#endif // __RotarySolidsMainFrame__
